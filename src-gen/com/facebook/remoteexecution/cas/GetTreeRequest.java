/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.remoteexecution.cas;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class GetTreeRequest implements org.apache.thrift.TBase<GetTreeRequest, GetTreeRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetTreeRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTreeRequest");

  private static final org.apache.thrift.protocol.TField ROOT_DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("root_digest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_size", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("page_token", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetTreeRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetTreeRequestTupleSchemeFactory();

  public Digest root_digest; // required
  public int page_size; // optional
  public java.lang.String page_token; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROOT_DIGEST((short)1, "root_digest"),
    PAGE_SIZE((short)2, "page_size"),
    PAGE_TOKEN((short)3, "page_token");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROOT_DIGEST
          return ROOT_DIGEST;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // PAGE_TOKEN
          return PAGE_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_SIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAGE_SIZE,_Fields.PAGE_TOKEN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROOT_DIGEST, new org.apache.thrift.meta_data.FieldMetaData("root_digest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Digest.class)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("page_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("page_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTreeRequest.class, metaDataMap);
  }

  public GetTreeRequest() {
  }

  public GetTreeRequest(
    Digest root_digest)
  {
    this();
    this.root_digest = root_digest;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetTreeRequest(GetTreeRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRoot_digest()) {
      this.root_digest = new Digest(other.root_digest);
    }
    this.page_size = other.page_size;
    if (other.isSetPage_token()) {
      this.page_token = other.page_token;
    }
  }

  public GetTreeRequest deepCopy() {
    return new GetTreeRequest(this);
  }

  @Override
  public void clear() {
    this.root_digest = null;
    setPage_sizeIsSet(false);
    this.page_size = 0;
    this.page_token = null;
  }

  public Digest getRoot_digest() {
    return this.root_digest;
  }

  public GetTreeRequest setRoot_digest(Digest root_digest) {
    this.root_digest = root_digest;
    return this;
  }

  public void unsetRoot_digest() {
    this.root_digest = null;
  }

  /** Returns true if field root_digest is set (has been assigned a value) and false otherwise */
  public boolean isSetRoot_digest() {
    return this.root_digest != null;
  }

  public void setRoot_digestIsSet(boolean value) {
    if (!value) {
      this.root_digest = null;
    }
  }

  public int getPage_size() {
    return this.page_size;
  }

  public GetTreeRequest setPage_size(int page_size) {
    this.page_size = page_size;
    setPage_sizeIsSet(true);
    return this;
  }

  public void unsetPage_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
  }

  /** Returns true if field page_size is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID);
  }

  public void setPage_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_SIZE_ISSET_ID, value);
  }

  public java.lang.String getPage_token() {
    return this.page_token;
  }

  public GetTreeRequest setPage_token(java.lang.String page_token) {
    this.page_token = page_token;
    return this;
  }

  public void unsetPage_token() {
    this.page_token = null;
  }

  /** Returns true if field page_token is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_token() {
    return this.page_token != null;
  }

  public void setPage_tokenIsSet(boolean value) {
    if (!value) {
      this.page_token = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ROOT_DIGEST:
      if (value == null) {
        unsetRoot_digest();
      } else {
        setRoot_digest((Digest)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPage_size();
      } else {
        setPage_size((java.lang.Integer)value);
      }
      break;

    case PAGE_TOKEN:
      if (value == null) {
        unsetPage_token();
      } else {
        setPage_token((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ROOT_DIGEST:
      return getRoot_digest();

    case PAGE_SIZE:
      return getPage_size();

    case PAGE_TOKEN:
      return getPage_token();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ROOT_DIGEST:
      return isSetRoot_digest();
    case PAGE_SIZE:
      return isSetPage_size();
    case PAGE_TOKEN:
      return isSetPage_token();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GetTreeRequest)
      return this.equals((GetTreeRequest)that);
    return false;
  }

  public boolean equals(GetTreeRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_root_digest = true && this.isSetRoot_digest();
    boolean that_present_root_digest = true && that.isSetRoot_digest();
    if (this_present_root_digest || that_present_root_digest) {
      if (!(this_present_root_digest && that_present_root_digest))
        return false;
      if (!this.root_digest.equals(that.root_digest))
        return false;
    }

    boolean this_present_page_size = true && this.isSetPage_size();
    boolean that_present_page_size = true && that.isSetPage_size();
    if (this_present_page_size || that_present_page_size) {
      if (!(this_present_page_size && that_present_page_size))
        return false;
      if (this.page_size != that.page_size)
        return false;
    }

    boolean this_present_page_token = true && this.isSetPage_token();
    boolean that_present_page_token = true && that.isSetPage_token();
    if (this_present_page_token || that_present_page_token) {
      if (!(this_present_page_token && that_present_page_token))
        return false;
      if (!this.page_token.equals(that.page_token))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRoot_digest()) ? 131071 : 524287);
    if (isSetRoot_digest())
      hashCode = hashCode * 8191 + root_digest.hashCode();

    hashCode = hashCode * 8191 + ((isSetPage_size()) ? 131071 : 524287);
    if (isSetPage_size())
      hashCode = hashCode * 8191 + page_size;

    hashCode = hashCode * 8191 + ((isSetPage_token()) ? 131071 : 524287);
    if (isSetPage_token())
      hashCode = hashCode * 8191 + page_token.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetTreeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRoot_digest()).compareTo(other.isSetRoot_digest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoot_digest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.root_digest, other.root_digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPage_size()).compareTo(other.isSetPage_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_size, other.page_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPage_token()).compareTo(other.isSetPage_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_token, other.page_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetTreeRequest(");
    boolean first = true;

    sb.append("root_digest:");
    if (this.root_digest == null) {
      sb.append("null");
    } else {
      sb.append(this.root_digest);
    }
    first = false;
    if (isSetPage_size()) {
      if (!first) sb.append(", ");
      sb.append("page_size:");
      sb.append(this.page_size);
      first = false;
    }
    if (isSetPage_token()) {
      if (!first) sb.append(", ");
      sb.append("page_token:");
      if (this.page_token == null) {
        sb.append("null");
      } else {
        sb.append(this.page_token);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (root_digest != null) {
      root_digest.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetTreeRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetTreeRequestStandardScheme getScheme() {
      return new GetTreeRequestStandardScheme();
    }
  }

  private static class GetTreeRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetTreeRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetTreeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROOT_DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.root_digest = new Digest();
              struct.root_digest.read(iprot);
              struct.setRoot_digestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page_size = iprot.readI32();
              struct.setPage_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.page_token = iprot.readString();
              struct.setPage_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetTreeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.root_digest != null) {
        oprot.writeFieldBegin(ROOT_DIGEST_FIELD_DESC);
        struct.root_digest.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPage_size()) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.page_size);
        oprot.writeFieldEnd();
      }
      if (struct.page_token != null) {
        if (struct.isSetPage_token()) {
          oprot.writeFieldBegin(PAGE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.page_token);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetTreeRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetTreeRequestTupleScheme getScheme() {
      return new GetTreeRequestTupleScheme();
    }
  }

  private static class GetTreeRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetTreeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetTreeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRoot_digest()) {
        optionals.set(0);
      }
      if (struct.isSetPage_size()) {
        optionals.set(1);
      }
      if (struct.isSetPage_token()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRoot_digest()) {
        struct.root_digest.write(oprot);
      }
      if (struct.isSetPage_size()) {
        oprot.writeI32(struct.page_size);
      }
      if (struct.isSetPage_token()) {
        oprot.writeString(struct.page_token);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetTreeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.root_digest = new Digest();
        struct.root_digest.read(iprot);
        struct.setRoot_digestIsSet(true);
      }
      if (incoming.get(1)) {
        struct.page_size = iprot.readI32();
        struct.setPage_sizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.page_token = iprot.readString();
        struct.setPage_tokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

